api:
  id: api_id
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - script.execute: control_leds
  on_client_disconnected:
    - script.execute: control_leds


button:
  # Restarts Sat1 Device
  - platform: restart
    name: "Restart Sat1"
    entity_category: diagnostic

  # Restarts Sat1 to safe mode
  - platform: safe_mode
    name: "Restart Sat1 (Safe Mode)"
    entity_category: diagnostic

  # Restores the Sat1 ESP back to factory settings
  #TODO: What buttons do we want to long press to initiate this
  #TODO: Create the factory reset firmware
  - platform: factory_reset
    id: factory_reset_button
    name: "Factory Reset ESP32 FW"
    entity_category: diagnostic
    internal: true

  # Flashes Satellite1 with most recent XMOS firmware
  #TODO: This needs to grab the latest firmware and not hardcoded version
  #TODO: The LED ring does not show a visual status when flashing because we connect to the LEDs via XMOS and can't connect during flashing.  Hrmmmmmm....
  - platform: template
    id: flash_satellite
    name: "Flash XMOS ${xmos_fw_version}"
    entity_category: diagnostic
    on_press:
      then:
        - lambda: id(xmos_flashing_started) = true;
        - script.execute: control_leds
        - ota.satellite1.flash:
            url: https://raw.githubusercontent.com/FutureProofHomes/Documentation/refs/heads/main/assets/firmware/xmos/${xmos_fw_version}/satellite1_firmware_adec.factory.bin
            md5_url: https://raw.githubusercontent.com/FutureProofHomes/Documentation/refs/heads/main/assets/firmware/xmos/${xmos_fw_version}/satellite1_firmware_adec.factory.md5


switch:
    # Wake Word Sound Switch.
  - platform: template
    id: wake_sound
    name: Wake sound
    icon: "mdi:bullhorn"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

    # Enable user to toggle wake word on/off?  Perhaps this is no longer necessary?
  - platform: template
    id: sw_enable_mww
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:account-voice"
    name: Enable Wake Word
    entity_category: config
    optimistic: true
    on_turn_on:
      - micro_wake_word.start:
    on_turn_off:
      - micro_wake_word.stop:

    # This is the master mute switch. It is exposed to Home Assistant. The user can only turn it on and off if the hardware switch is off. (The hardware switch overrides the software one)
  - platform: template
    id: master_mute_switch
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:microphone-off"
    name: Mute Microphones
    entity_category: config
    turn_on_action:
      - if:
          condition:
            binary_sensor.is_off: btn_left
          then:
            - switch.template.publish:
                id: master_mute_switch
                state: ON
    turn_off_action:
      - if:
          condition:
            binary_sensor.is_off: btn_left
          then:
            - switch.template.publish:
                id: master_mute_switch
                state: OFF
          else:
            - lambda: id(warning) = true;
            - script.execute: control_leds
    on_turn_on:
      - script.execute: control_leds
    on_turn_off:
      - script.execute: control_leds

  - platform: template
    id: beta_firmware
    name: Beta firmware
    icon: "mdi:test-tube"
    disabled_by_default: true
    entity_category: diagnostic
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - logger.log: "OTA updates set to use Beta firmware"
      #TODO: Need an endpoint to GET the latest beta firmware @qnlbnsl
      # - lambda: id(update_http_request).set_source_url("https://firmware.esphome.io/home-assistant-voice-pe/home-assistant-voice/manifest-beta.json");
    on_turn_off:
      #TODO: Need an endpoint to GET the latest production firmware @qnlbnsl
      - logger.log: "OTA updates set to use Production firmware"
      # - lambda: id(update_http_request).set_source_url("https://firmware.esphome.io/home-assistant-voice-pe/home-assistant-voice/manifest.json");
