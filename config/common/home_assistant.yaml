api:
  id: api_id
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - script.execute: control_leds
  on_client_disconnected:
    - script.execute: control_leds


button:
  # Restarts Sat1 Device
  - platform: restart
    name: "Restart Sat1"
    entity_category: diagnostic

  # Restores the Sat1 ESP back to factory settings
  - platform: factory_reset
    id: factory_reset_button
    name: "Factory Reset ESP32 FW"
    entity_category: diagnostic
    internal: true
  
  # Flashes Sat1 HAT with XMOS firmware embedded in the ESP32
  - platform: template
    id: flash_embedded
    name: "XMOS Flash Embedded FW"
    entity_category: diagnostic
    on_press:
      then:
        - memory_flasher.write_embedded_image:

  # Wipes the Satellite1 HAT XMOS Chip
  - platform: template
    id: erase_xmos_flash
    name: "XMOS Erase Chip"
    entity_category: diagnostic
    on_press:
      then:
        - memory_flasher.erase:

text_sensor:
  - platform: template
    id: pd_state_text
    name: "USB-C Power Draw"
    icon: "mdi:usb-c-port"
    entity_category: "diagnostic"
    update_interval: never
    lambda: |-
      if( id(pd_fusb302b).state == power_delivery::PD_STATE_DISCONNECTED){
        return std::string("Detached");
      } else {
        return id(pd_fusb302b).contract;
      }

  - platform: template
    id: xmos_firmware_version_text
    name: "XMOS Firmware"
    icon: "mdi:memory"
    entity_category: "diagnostic"
    update_interval: never
    lambda: return std::string("Reading FW not supported");
      
