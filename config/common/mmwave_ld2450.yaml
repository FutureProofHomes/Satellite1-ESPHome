# ===========================================================================================
# ===========================================================================================
# ===========================================================================================
# # The below configuration is a PR for the LD2450 that is waiting to be merged with ESPHome.
# # As of this moment it causes the Sat1 not to boot

# # https://deploy-preview-3327--esphome.netlify.app/components/sensor/ld2450.html?highlight=ld2450
# ===========================================================================================

# external_components:
#   - source:
#       type: git
#       url: https://github.com/hareeshmu/esphome
#       ref: ld2450
#     components: [ ld2450 ]


# uart:
#   id: uart_ld2450
#   tx_pin: 
#     number: GPIO43
#     mode:
#       input: true
#       pullup: true
#   rx_pin: 
#     number: GPIO44
#     mode:
#       input: true
#       pullup: true
#   baud_rate: 256000
#   parity: NONE
#   stop_bits: 1


# ld2450:
#   id: ld2450_radar
#   uart_id: uart_ld2450
#   throttle: 1000ms


# binary_sensor:
#   - platform: ld2450
#     ld2450_id: ld2450_radar
#     has_target:
#       name: Presence
#     has_moving_target:
#       name: Moving Target
#     has_still_target:
#       name: Still Target


# number:
#   - platform: ld2450
#     ld2450_id: ld2450_radar
#     presence_timeout:
#       name: "Timeout"
#     zone_1:
#       x1:
#         name: Zone-1 X1
#       y1:
#         name: Zone-1 Y1
#       x2:
#         name: Zone-1 X2
#       y2:
#         name: Zone-1 Y2
#     zone_2:
#       x1:
#         name: Zone-2 X1
#       y1:
#         name: Zone-2 Y1
#       x2:
#         name: Zone-2 X2
#       y2:
#         name: Zone-2 Y2
#     zone_3:
#       x1:
#         name: Zone-3 X1
#       y1:
#         name: Zone-3 Y1
#       x2:
#         name: Zone-3 X2
#       y2:
#         name: Zone-3 Y2


# switch:
#   - platform: ld2450
#     ld2450_id: ld2450_radar
#     bluetooth:
#       name: "Bluetooth"
#     multi_target:
#       name: "Multi Target Tracking"


# select:
#   - platform: ld2450
#     ld2450_id: ld2450_radar
#     baud_rate:
#       name: "Baud rate"
#     zone_type:
#       name: "Zone Type"


# text_sensor:
#   - platform: ld2450
#     ld2450_id: ld2450_radar
#     version:
#       name: "LD2450 Firmware"
#     mac_address:
#       name: "LD2450 BT MAC"
#     target_1:
#       direction:
#         name: "Target-1 Direction"
#     target_2:
#       direction:
#         name: "Target-2 Direction"
#     target_3:
#       direction:
#         name: "Target-3 Direction"


# sensor:
#   - platform: ld2450
#     ld2450_id: ld2450_radar
#     target_count:
#       name: Presence Target Count
#     still_target_count:
#       name: Still Target Count
#     moving_target_count:
#       name: Moving Target Count
#     target_1:
#       x:
#         name: Target-1 X
#       y:
#         name: Target-1 Y
#       speed:
#         name: Target-1 Speed
#       angle:
#         name: Target-1 Angle
#       distance:
#         name: Target-1 Distance
#       resolution:
#         name: Target-1 Resolution
#     target_2:
#       x:
#         name: Target-2 X
#       y:
#         name: Target-2 Y
#       speed:
#         name: Target-2 Speed
#       angle:
#         name: Target-2 Angle
#       distance:
#         name: Target-2 Distance
#       resolution:
#         name: Target-2 Resolution
#     target_3:
#       x:
#         name: Target-3 X
#       y:
#         name: Target-3 Y
#       speed:
#         name: Target-3 Speed
#       angle:
#         name: Target-3 Angle
#       distance:
#         name: Target-3 Distance
#       resolution:
#         name: Target-3 Resolution
#     zone_1:
#       target_count:
#         name: Zone-1 All Target Count
#       still_target_count:
#         name: Zone-1 Still Target Count
#       moving_target_count:
#         name: Zone-1 Moving Target Count
#     zone_2:
#       target_count:
#         name: Zone-2 All Target Count
#       still_target_count:
#         name: Zone-2 Still Target Count
#       moving_target_count:
#         name: Zone-2 Moving Target Count
#     zone_3:
#       target_count:
#         name: Zone-3 All Target Count
#       still_target_count:
#         name: Zone-3 Still Target Count
#       moving_target_count:
#         name: Zone-3 Moving Target Count


# button:
#   - platform: ld2450
#     ld2450_id: ld2450_radar
#     factory_reset:
#       name: "LD2450 Factory Reset"
#     restart:
#       name: "LD2450 Restart"

















# ===========================================================================================
# ===========================================================================================
# ===========================================================================================
# ===========================================================================================
# ===========================================================================================
# # The below configuration is a working configuration for the LD2450 mmwave radar, but it does cause the microphone to break
# # https://github.com/HA-TB303/ultimatesensor_mini/blob/main/ultimatesensor_mini_v1.yaml

# # ERROR:
# # [22:43:14][D][i2s_audio:067][microphone_task]: Install driver requested by Reader
# # [22:43:14][V][esp-idf:000][microphone_task]: E (31567) gdma: gdma_install_rx_interrupt(819): alloc interrupt failed
# # [22:43:14]
# # [22:43:14][V][esp-idf:000][microphone_task]: E (31568) gdma: gdma_register_rx_event_callbacks(481): install interrupt service failed
# # [22:43:14]
# # [22:43:14][V][esp-idf:000][microphone_task]: I (31570) I2S: DMA Malloc info, datalen=blocksize=3840, dma_buf_count=4
# # [22:43:14]
# # [22:43:14][V][esp-idf:000][microphone_task]: I (31572) I2S: DMA Malloc info, datalen=blocksize=3840, dma_buf_count=4
# # [22:43:14]
# # [22:43:14][D][i2s_audio:077][microphone_task]: Installing driver : yes
# # [22:43:14][D][i2s_audio.microphone:322]: Starting I2S Audio Microphne
# # [22:43:14][D][i2s_audio.microphone:326]: Started I2S Audio Microphone
# ===========================================================================================

# globals:
#   ## Global initialisation variable. 
#   ## mmwave update time
#   - id: mmwave_update_time
#     type: unsigned long
#     restore_value: no
#     initial_value: '0'
#   - id: mmwave_enabled
#     type: bool
#     restore_value: no
#     initial_value: 'false'

# ## LD2450 mmwave on uart bus
# uart:
#   id: uart_bus
#   tx_pin: 
#     number: GPIO43
#     mode:
#       input: true
#       pullup: true
#   rx_pin: 
#     number: GPIO44
#     mode:
#       input: true
#       pullup: true
#   baud_rate: 256000
#   parity: NONE
#   stop_bits: 1
#   data_bits: 8
#   debug:
#     direction: BOTH
#     dummy_receiver: True
#     after:
#      delimiter: [0X55, 0XCC]
#     sequence:
#       ## - lambda: UARTDebug::log_hex(direction, bytes, ' ');
#       - lambda: |-
#           // Do not parse anything until mmwave_enabled is true.
#           if (!id(mmwave_enabled)) {
#             return;
#           }

#           if ((millis() - id(mmwave_update_time)) <= 1000) { 
#             return;
#           };
#           id(mmwave_update_time) = millis();

#           int16_t p1_x = (uint16_t((bytes[5] << 8) | bytes[4] ));
#           if ((bytes[5] & 0x80) >> 7){
#             p1_x -= pow(2, 15); 
#           }else{
#             p1_x = 0 - p1_x; // was 0 - p1_x;
#           }
#           p1_x = -p1_x;

#           int16_t p1_y = (uint16_t((bytes[7] << 8) | bytes[6] ));
#           if ((bytes[7] & 0x80) >> 7){
#             p1_y -= pow(2, 15);
#           }else{
#             p1_y = 0 - p1_y;
#           }

#           float p1_speed = (bytes[9] << 8 | bytes[8] );
#           if ((bytes[9] & 0x80) >> 7){
#             p1_speed -= pow(2, 15);
#           }else{
#             p1_speed = 0 - p1_speed;
#           }
#           int16_t p1_distance_resolution = (uint16_t((bytes[11] << 8) | bytes[10] )); 

#           int16_t p2_x = (uint16_t((bytes[13] << 8) | bytes[12] ));
#           if ((bytes[13] & 0x80) >> 7){
#             p2_x -=  pow(2, 15); 
#           }else{
#             p2_x = 0 - p2_x;
#           }

#           int16_t p2_y = (uint16_t((bytes[15] << 8) | bytes[14] ));
#           if ((bytes[15] & 0x80) >> 7){
#             p2_y -= pow(2, 15);
#           }else{
#             p2_y = 0 - p2_y;
#           }

#           float p2_speed = (bytes[17] << 8 | bytes[16] );
#           if ((bytes[17] & 0x80) >> 7){
#             p2_speed -= pow(2, 15);
#           }else{
#             p2_speed = 0 - p2_speed;
#           }
#           int16_t p2_distance_resolution = (uint16_t((bytes[19] << 8) | bytes[18] )); 

#           int16_t p3_x = (uint16_t((bytes[21] << 8) | bytes[20] ));
#           if ((bytes[21] & 0x80) >> 7){
#             p3_x -=  pow(2, 15); 
#           }else{
#             p3_x = 0 - p3_x;
#           }

#           int16_t p3_y = (uint16_t((bytes[23] << 8) | bytes[22] ));
#           if ((bytes[23] & 0x80) >> 7){
#             p3_y -= pow(2, 15);
#           }else{
#             p3_y = 0 - p3_y;
#           }

#           float p3_speed = (bytes[25] << 8 | bytes[24] );
#           if ((bytes[25] & 0x80) >> 7){
#             p3_speed -= pow(2, 15);
#           }else{
#             p3_speed = 0 - p3_speed;
#           }
#           int16_t p3_distance_resolution = (uint16_t((bytes[27] << 8) | bytes[26] ));

#           const float RADIANS_TO_DEGREES = 180.0 / 3.14159265358979323846;
#           float p1_angle = atan2(p1_y, p1_x) * RADIANS_TO_DEGREES;
#           float p2_angle = atan2(p2_y, p2_x) * RADIANS_TO_DEGREES;
#           float p3_angle = atan2(p3_y, p3_x) * RADIANS_TO_DEGREES;
          
#           float p1_distance = sqrt(p1_x * p1_x + p1_y * p1_y);
#           float p2_distance = sqrt(p2_x * p2_x + p2_y * p2_y);
#           float p3_distance = sqrt(p3_x * p3_x + p3_y * p3_y);
          

#           float max_distance = float(id(maxx_distance).state) * 10;
#           if (p1_distance < max_distance) {
#             id(target1_x).publish_state(p1_x * -1);
#             id(target1_y).publish_state(p1_y);
#             id(target1_speed).publish_state(p1_speed / 100);
#             id(target1_resolution).publish_state(p1_distance_resolution);
#             id(target1_distance).publish_state(p1_distance);
#             id(target1_angle).publish_state(p1_angle - 90);
#           } else {
#             id(target1_x).publish_state(0);
#             id(target1_y).publish_state(0);
#             id(target1_speed).publish_state(0);
#             id(target1_resolution).publish_state(0);
#             id(target1_distance).publish_state(0);
#             id(target1_angle).publish_state(0);
#           }

#           if (p2_distance < max_distance) {
#             id(target2_x).publish_state(p2_x);
#             id(target2_y).publish_state(p2_y);
#             id(target2_speed).publish_state(p2_speed / 100);
#             id(target2_resolution).publish_state(p2_distance_resolution);
#             id(target2_distance).publish_state(p2_distance);
#             id(target2_angle).publish_state(p2_angle);
#           } else {
#             id(target2_x).publish_state(0);
#             id(target2_y).publish_state(0);
#             id(target2_speed).publish_state(0);
#             id(target2_resolution).publish_state(0);
#             id(target2_distance).publish_state(0);
#             id(target2_angle).publish_state(0);
#           }

#           if (p3_distance < max_distance) {
#             id(target3_x).publish_state(p3_x);
#             id(target3_y).publish_state(p3_y);
#             id(target3_speed).publish_state(p3_speed / 100);
#             id(target3_resolution).publish_state(p3_distance_resolution);
#             id(target3_distance).publish_state(p3_distance);
#             id(target3_angle).publish_state(p3_angle);
#           } else {
#             id(target3_x).publish_state(0);
#             id(target3_y).publish_state(0);
#             id(target3_speed).publish_state(0);
#             id(target3_resolution).publish_state(0);
#             id(target3_distance).publish_state(0);
#             id(target3_angle).publish_state(0);
#           }

#           int zone1_count = 0;      
#           if (id(target1_active).state == true ) {
#               if ((id(target1_x).state >= id(zone1_begin_x).state && id(target1_x).state <= id(zone1_end_x).state) &&
#                   (id(target1_y).state >= id(zone1_begin_y).state && id(target1_y).state <= id(zone1_end_y).state)) {
#                   zone1_count++;
#               }
#           }

#           if (id(target2_active).state == true ) {
#               if ((id(target2_x).state >= id(zone1_begin_x).state && id(target2_x).state <= id(zone1_end_x).state) &&
#                   (id(target2_y).state >= id(zone1_begin_y).state && id(target2_y).state <= id(zone1_end_y).state)) {
#                   zone1_count++;
#               }
#           }

#           if (id(target3_active).state == true ) {
#               if ((id(target3_x).state >= id(zone1_begin_x).state && id(target3_x).state <= id(zone1_end_x).state) &&
#                   (id(target3_y).state >= id(zone1_begin_y).state && id(target3_y).state <= id(zone1_end_y).state)) {
#                   zone1_count++;
#               }
#           }

#           if (zone1_count > 0) {
#               id(zone1_occupancy).publish_state(true);
#               id(zone1_target_count).publish_state(zone1_count);
#           } else {
#               id(zone1_occupancy).publish_state(false);
#               id(zone1_target_count).publish_state(0);
#           }

#           int zone2_count = 0;
#           if (id(target1_active).state == true ) {
#               if ((id(target1_x).state >= id(zone2_begin_x).state && id(target1_x).state <= id(zone2_end_x).state) &&
#                   (id(target1_y).state >= id(zone2_begin_y).state && id(target1_y).state <= id(zone2_end_y).state)) {
#                   zone2_count++;
#               }
#           }
#           if (id(target2_active).state == true ) {
#               if ((id(target2_x).state >= id(zone2_begin_x).state && id(target2_x).state <= id(zone2_end_x).state) &&
#                   (id(target2_y).state >= id(zone2_begin_y).state && id(target2_y).state <= id(zone2_end_y).state)) {
#                   zone2_count++;
#               }
#           }
#           if (id(target3_active).state == true ) {
#               if ((id(target3_x).state >= id(zone2_begin_x).state && id(target3_x).state <= id(zone2_end_x).state) &&
#                   (id(target3_y).state >= id(zone2_begin_y).state && id(target3_y).state <= id(zone2_end_y).state)) {
#                   zone2_count++;
#               }
#           }
#           if (zone2_count > 0) {
#               id(zone2_occupancy).publish_state(true);
#               id(zone2_target_count).publish_state(zone2_count);
#           } else {
#               id(zone2_occupancy).publish_state(false);
#               id(zone2_target_count).publish_state(0);
#           }

#           int zone3_count = 0;
#           if (id(target1_active).state == true ) {
#               if ((id(target1_x).state >= id(zone3_begin_x).state && id(target1_x).state <= id(zone3_end_x).state) &&
#                   (id(target1_y).state >= id(zone3_begin_y).state && id(target1_y).state <= id(zone3_end_y).state)) {
#                   zone3_count++;
#               }
#           }
#           if (id(target2_active).state == true ) {
#               if ((id(target2_x).state >= id(zone3_begin_x).state && id(target2_x).state <= id(zone3_end_x).state) &&
#                   (id(target2_y).state >= id(zone3_begin_y).state && id(target2_y).state <= id(zone3_end_y).state)) {
#                   zone3_count++;
#               }
#           }
#           if (id(target3_active).state == true ) {
#               if ((id(target3_x).state >= id(zone3_begin_x).state && id(target3_x).state <= id(zone3_end_x).state) &&
#                   (id(target3_y).state >= id(zone3_begin_y).state && id(target3_y).state <= id(zone3_end_y).state)) {
#                   zone3_count++;
#               }
#           }
#           if (zone3_count > 0) {
#               id(zone3_occupancy).publish_state(true);
#               id(zone3_target_count).publish_state(zone3_count);
#           } else {
#               id(zone3_occupancy).publish_state(false);
#               id(zone3_target_count).publish_state(0);
#           }

#           int zone4_count = 0;
#           if (id(target1_active).state == true ) {
#               if ((id(target1_x).state >= id(zone4_begin_x).state && id(target1_x).state <= id(zone4_end_x).state) &&
#                   (id(target1_y).state >= id(zone4_begin_y).state && id(target1_y).state <= id(zone4_end_y).state)) {
#                   zone4_count++;
#               }
#           }
#           if (id(target2_active).state == true ) {
#               if ((id(target2_x).state >= id(zone4_begin_x).state && id(target2_x).state <= id(zone4_end_x).state) &&
#                   (id(target2_y).state >= id(zone4_begin_y).state && id(target2_y).state <= id(zone4_end_y).state)) {
#                   zone4_count++;
#               }
#           }
#           if (id(target3_active).state == true ) {
#               if ((id(target3_x).state >= id(zone4_begin_x).state && id(target3_x).state <= id(zone4_end_x).state) &&
#                   (id(target3_y).state >= id(zone4_begin_y).state && id(target3_y).state <= id(zone4_end_y).state)) {
#                   zone4_count++;
#               }
#           }
#           if (zone4_count > 0) {
#               id(zone4_occupancy).publish_state(true);
#               id(zone4_target_count).publish_state(zone4_count);
#           } else {
#               id(zone4_occupancy).publish_state(false);
#               id(zone4_target_count).publish_state(0);
#           }

# sensor:
#   ## LD2450 mmwave sensor template sensors
#   - platform: template
#     name: "Target 1 X"
#     id: target1_x
#     accuracy_decimals: 0
#     unit_of_measurement: 'mm'
#     state_class: measurement
#     device_class: distance
#   - platform: template
#     name: "Target 1 Y"
#     id: target1_y
#     accuracy_decimals: 0
#     unit_of_measurement: 'mm'
#     state_class: measurement
#     device_class: distance
#   - platform: template
#     name: "Target 1 Speed"
#     id: target1_speed
#     accuracy_decimals: 2
#     unit_of_measurement: 'm/s'
#     state_class: measurement
#     device_class: speed
#   - platform: template
#     name: "Target 1 Resolution"
#     id: target1_resolution
#     accuracy_decimals: 0
#     unit_of_measurement: 'mm'
#     state_class: measurement
#     device_class: distance
#   - platform: template
#     name: "Target 2 X"
#     id: target2_x
#     accuracy_decimals: 0
#     unit_of_measurement: 'mm'
#     state_class: measurement
#     device_class: distance
#   - platform: template
#     name: "Target 2 Y"
#     id: target2_y
#     accuracy_decimals: 0
#     unit_of_measurement: 'mm'
#     state_class: measurement
#     device_class: distance
#   - platform: template
#     name: "Target 2 Speed"
#     id: target2_speed
#     accuracy_decimals: 2
#     unit_of_measurement: 'm/s'
#     state_class: measurement
#     device_class: speed
#   - platform: template
#     name: "Target 2 Resolution"
#     id: target2_resolution
#     accuracy_decimals: 0
#     unit_of_measurement: 'mm'
#     state_class: measurement
#     device_class: distance
#   - platform: template
#     name: "Target 3 X"
#     id: target3_x
#     accuracy_decimals: 0
#     unit_of_measurement: 'mm'
#     state_class: measurement
#     device_class: distance
#   - platform: template
#     name: "Target 3 Y"
#     id: target3_y
#     accuracy_decimals: 0
#     unit_of_measurement: 'mm'
#     state_class: measurement
#     device_class: distance
#   - platform: template
#     name: "Target 3 Speed"
#     id: target3_speed
#     accuracy_decimals: 2
#     unit_of_measurement: 'm/s'
#     state_class: measurement
#     device_class: speed
#   - platform: template
#     name: "Target 3 Resolution"
#     id: target3_resolution
#     accuracy_decimals: 0
#     unit_of_measurement: 'mm'
#     state_class: measurement
#     device_class: distance
#   - platform: template
#     name: "Target 1 Angle"
#     id: target1_angle
#     accuracy_decimals: 0
#     unit_of_measurement: '°'
#     state_class: measurement
#   - platform: template
#     name: "Target 2 Angle"
#     id: target2_angle
#     accuracy_decimals: 0
#     unit_of_measurement: '°'
#     state_class: measurement
#   - platform: template
#     name: "Target 3 Angle"
#     id: target3_angle
#     accuracy_decimals: 0
#     unit_of_measurement: '°'
#     state_class: measurement
#   - platform: template
#     name: "Target 1 Distance"
#     id: target1_distance
#     accuracy_decimals: 0
#     unit_of_measurement: 'mm'
#     state_class: measurement
#     device_class: distance
#   - platform: template
#     name: "Target 2 Distance"
#     id: target2_distance
#     accuracy_decimals: 0
#     unit_of_measurement: 'mm'
#     state_class: measurement
#     device_class: distance
#   - platform: template
#     name: "Target 3 Distance"
#     id: target3_distance
#     accuracy_decimals: 0
#     unit_of_measurement: 'mm'
#     state_class: measurement
#     device_class: distance
#   - platform: template
#     name: "Zone 1 Target Count"
#     id: zone1_target_count
#     accuracy_decimals: 0
#   - platform: template
#     name: "Zone 2 Target Count"
#     id: zone2_target_count
#     accuracy_decimals: 0
#   - platform: template
#     name: "Zone 3 Target Count"
#     id: zone3_target_count
#     accuracy_decimals: 0
#   - platform: template
#     name: "Zone 4 Target Count"
#     id: zone4_target_count
#     accuracy_decimals: 0
#     disabled_by_default: true


# binary_sensor:
#   ## mmwave template sensors
#   - platform: template
#     name: "Occupancy"
#     device_class: occupancy
#     filters:
#       - delayed_off: !lambda return (id(off_delay).state *1000);
#     lambda: |-
#       return (id(target1_distance).state != 0
#         || id(target2_distance).state != 0
#         || id(target3_distance).state != 0);
#   - platform: template
#     name: "Zone 1 Occupancy"
#     id: zone1_occupancy
#     filters:
#       - delayed_off: !lambda return (id(zone_1_off_delay).state *1000);
#   - platform: template
#     name: "Zone 2 Occupancy"
#     id: zone2_occupancy
#     filters:
#       - delayed_off: !lambda return (id(zone_2_off_delay).state *1000);
#   - platform: template
#     name: "Zone 3 Occupancy"
#     id: zone3_occupancy
#     filters:
#       - delayed_off: !lambda return (id(zone_3_off_delay).state *1000);
#   - platform: template
#     name: "Zone 4 Occupancy"
#     id: zone4_occupancy
#     filters:
#       - delayed_off: !lambda return (id(zone_4_off_delay).state *1000);
#     disabled_by_default: true
#   - platform: template
#     name: "Target 1 Active"
#     id: target1_active
#     lambda: |-
#       return id(target1_distance).state != 0;
#   - platform: template
#     name: "Target 2 Active"
#     id: target2_active
#     lambda: |-
#       return id(target2_distance).state != 0;
#   - platform: template
#     name: "Target 3 Active"
#     id: target3_active
#     lambda: |-
#       return id(target3_distance).state != 0;

# number:
#   ## mmwave template sensors
#   - platform: template
#     name: "Occupancy Off Delay"
#     id: off_delay
#     max_value: 600
#     min_value: 0
#     step: 1
#     optimistic: True
#     restore_value: True
#     unit_of_measurement: "s"
#     initial_value: 15
#   - platform: template
#     name: "Max Distance"
#     id: maxx_distance
#     max_value: 600
#     min_value: 0
#     unit_of_measurement: "cm"
#     step: 1
#     optimistic: True
#     restore_value: True
#     initial_value: 600

#   - platform: template
#     name: "Zone 1 Begin X"
#     id: zone1_begin_x
#     max_value: 4000
#     min_value: -4000
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#     initial_value: -4000
#   - platform: template
#     name: "Zone 1 End X"
#     id: zone1_end_x
#     max_value: 4000
#     min_value: -4000
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#     initial_value: 4000
#   - platform: template
#     name: "Zone 1 Begin Y"
#     id: zone1_begin_y
#     max_value: 6000
#     min_value: 0
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#     initial_value: 0
#   - platform: template
#     name: "Zone 1 End Y"
#     id: zone1_end_y
#     max_value: 6000
#     min_value: 0
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#     initial_value: 6000
#   - platform: template
#     name: "Zone 1 Occupancy Off Delay"
#     id: zone_1_off_delay
#     max_value: 600
#     min_value: 0
#     step: 1
#     optimistic: True
#     restore_value: True
#     unit_of_measurement: "s"
#     initial_value: 15

#   - platform: template
#     name: "Zone 2 Begin X"
#     id: zone2_begin_x
#     max_value: 4000
#     min_value: -4000
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#   - platform: template
#     name: "Zone 2 End X"
#     id: zone2_end_x
#     max_value: 4000
#     min_value: -4000
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#   - platform: template
#     name: "Zone 2 Begin Y"
#     id: zone2_begin_y
#     max_value: 6000
#     min_value: 0
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#   - platform: template
#     name: "Zone 2 End Y"
#     id: zone2_end_y
#     max_value: 6000
#     min_value: 0
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#   - platform: template
#     name: "Zone 2 Occupancy Off Delay"
#     id: zone_2_off_delay
#     max_value: 600
#     min_value: 0
#     step: 1
#     optimistic: True
#     restore_value: True
#     unit_of_measurement: "s"
#     initial_value: 15

#   - platform: template
#     name: "Zone 3 Begin X"
#     id: zone3_begin_x
#     max_value: 4000
#     min_value: -4000
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#   - platform: template
#     name: "Zone 3 End X"
#     id: zone3_end_x
#     max_value: 4000
#     min_value: -4000
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#   - platform: template
#     name: "Zone 3 Begin Y"
#     id: zone3_begin_y
#     max_value: 6000
#     min_value: 0
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#   - platform: template
#     name: "Zone 3 End Y"
#     id: zone3_end_y
#     max_value: 6000
#     min_value: 0
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#   - platform: template
#     name: "Zone 3 Occupancy Off Delay"
#     id: zone_3_off_delay
#     max_value: 600
#     min_value: 0
#     step: 1
#     optimistic: True
#     restore_value: True
#     unit_of_measurement: "s"
#     initial_value: 15
#   - platform: template
#     name: "Zone 4 Begin X"
#     id: zone4_begin_x
#     max_value: 4000
#     min_value: -4000
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#     disabled_by_default: true
#   - platform: template
#     name: "Zone 4 End X"
#     id: zone4_end_x
#     max_value: 4000
#     min_value: -4000
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#     disabled_by_default: true
#   - platform: template
#     name: "Zone 4 Begin Y"
#     id: zone4_begin_y
#     max_value: 6000
#     min_value: 0
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#     disabled_by_default: true
#   - platform: template
#     name: "Zone 4 End Y"
#     id: zone4_end_y
#     max_value: 6000
#     min_value: 0
#     unit_of_measurement: "mm"
#     step: 10
#     optimistic: True
#     restore_value: True
#     disabled_by_default: true
#   - platform: template
#     name: "Zone 4 Occupancy Off Delay"
#     id: zone_4_off_delay
#     max_value: 600
#     min_value: 0
#     step: 1
#     optimistic: True
#     restore_value: True
#     unit_of_measurement: "s"
#     initial_value: 15
#     disabled_by_default: true