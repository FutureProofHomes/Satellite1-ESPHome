
external_components:
  - source:
      type: local
      path: ../esphome/components
    components: [ version, udp_stream ]

debug:
  update_interval: 5s

text_sensor:
  - platform: debug
    device:
      name: "Device Info"
      entity_category: "diagnostic"
    reset_reason:
      name: "Reset Reason"
      entity_category: "diagnostic"

  - platform: version
    name: Satellite1 Firmware Build
    entity_category: "diagnostic"
    hide_timestamp: true

  - platform: template
    name: "Current XMOS fw"
    entity_category: "diagnostic"
    icon: "mdi:code-braces"
    lambda: |-
      return std::string("${xmos_fw_version}");

  - platform: template
    name: "Works w/ CORE hw"
    entity_category: "diagnostic"
    icon: "mdi:chip"
    lambda: |-
      return std::string("${built_for_core_hw_version}");

  - platform: template
    name: "Works w/ HAT hw"
    entity_category: "diagnostic"
    icon: "mdi:chip"
    lambda: |-
      return std::string("${built_for_hat_hw_version}");

sensor:
  - platform: debug
    free:
      name: "Heap Free"
      entity_category: "diagnostic"
    block:
      name: "Heap Max Block"
      entity_category: "diagnostic"
    loop_time:
      name: "Loop Time"
      entity_category: "diagnostic"
    psram:
      name: "Free PSRAM"
      entity_category: "diagnostic"
  - platform: wifi_signal
    name: "Wi-Fi Signal Strength"
    entity_category: "diagnostic"
    update_interval: 60s

# Separate UDP Stream configurations for each microphone
udp_stream:
  id: udp_streamer
  microphone: asr_mic  # Default microphone to prevent validation errors

# Switches to toggle between ASR and Comm microphones
switch:
  - platform: template
    name: "UDP Stream ASR Mic"
    entity_category: "diagnostic"
    id: use_asr_mic
    icon: mdi:microphone
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    on_turn_on:
      - logger.log: "Switching to ASR Mic for UDP stream"
      - lambda: |-
          if (id(udp_streamer).is_running()) {
            id(udp_streamer).request_stop();  // Stop current stream
            delay(500);  // Wait for stream to stop
          }
          id(udp_streamer).set_microphone(id(asr_mic));  // Set ASR mic
          id(udp_streamer).request_start(true);  // Start stream with ASR mic
      - switch.turn_off: use_comm_mic         # Turn off the other switch

    on_turn_off:
      - logger.log: "Turning off ASR Mic UDP stream"
      - lambda: |-
          if (id(udp_streamer).is_running()) {
            id(udp_streamer).request_stop();  // Stop the stream when ASR mic is turned off
          }

  - platform: template
    name: "UDP Stream Comm Mic"
    entity_category: "diagnostic"
    id: use_comm_mic
    icon: mdi:microphone
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    on_turn_on:
      - logger.log: "Switching to Comm Mic for UDP stream"
      - micro_wake_word.stop:
      - delay: 500ms
      - lambda: |-
          if (id(udp_streamer).is_running()) {
            id(udp_streamer).request_stop();  // Stop current stream
            delay(500);  // Wait for stream to stop
          }
          id(udp_streamer).set_microphone(id(comm_mic));  // Set Comm mic
          id(udp_streamer).request_start(true);  // Start stream with Comm mic
      - switch.turn_off: use_asr_mic           # Turn off the other switch

    on_turn_off:
      - logger.log: "Turning off Comm Mic UDP stream"
      - lambda: |-
          if (id(udp_streamer).is_running()) {
            id(udp_streamer).request_stop();  // Stop the stream when Comm mic is turned off
          }
      - delay: 500ms
      - micro_wake_word.start: