substitutions:
  # Phases of the Voice Assistant
  # The voice assistant is ready to be triggered by a wake word
  voice_assist_idle_phase_id: '1'
  # The voice assistant is waiting for a voice command (after being triggered by the wake word)
  voice_assist_waiting_for_command_phase_id: '2'
  # The voice assistant is listening for a voice command
  voice_assist_listening_for_command_phase_id: '3'
  # The voice assistant is currently processing the command
  voice_assist_thinking_phase_id: '4'
  # The voice assistant is replying to the command
  voice_assist_replying_phase_id: '5'
  # The voice assistant is not ready
  voice_assist_not_ready_phase_id: '10'
  # The voice assistant encountered an error
  voice_assist_error_phase_id: '11'


micro_wake_word:
  models:
    - model: okay_nabu
    - model: hey_jarvis
  vad:
  on_wake_word_detected:
    # If the wake word is detected when the device is muted (Possible with the software mute switch): Do nothing
    - if:
        condition:
          switch.is_off: master_mute_switch
        then:
          # If a timer is ringing: Stop it, do not start the voice assistant (We can stop timer from voice!)
          - if:
              condition:
                switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
              # Start voice assistant, stop current announcement.
              else:
                - if:
                    condition:
                      lambda: return id(nabu_media_player)->state == media_player::MediaPlayerState::MEDIA_PLAYER_STATE_ANNOUNCING;
                    then:
                      lambda: |-
                        id(nabu_media_player)
                          ->make_call()
                          .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_STOP)
                          .set_announcement(true)
                          .perform();
                    else:
                      - if:
                          condition:
                            switch.is_on: wake_sound
                          then:
                            - script.execute:
                                id: play_sound
                                priority: true
                                sound_file: !lambda return id(wake_word_triggered_sound);
                            - delay: 300ms
                      - voice_assistant.start:
                          wake_word: !lambda return wake_word;


switch:
  - platform: template
    id: sw_enable_mww
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:account-voice"
    name: Enable Wake Word
    entity_category: config
    optimistic: true
    on_turn_on:
      - micro_wake_word.start:
    on_turn_off:
      - micro_wake_word.stop:

    # This is the master mute switch. It is exposed to Home Assistant. The user can only turn it on and off if the hardware switch is off. (The hardware switch overrides the software one)
  - platform: template
    id: master_mute_switch
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:microphone-off"
    name: Mute Microphones
    entity_category: config
    turn_on_action:
      - if:
          condition:
            binary_sensor.is_off: btn_left
          then:
            - switch.template.publish:
                id: master_mute_switch
                state: ON
    turn_off_action:
      - if:
          condition:
            binary_sensor.is_off: btn_left
          then:
            - switch.template.publish:
                id: master_mute_switch
                state: OFF
    on_turn_on:
      - script.execute: control_leds
    on_turn_off:
      - script.execute: control_leds


# voice_assistant:
#   id: va
#   microphone: mic0
#   media_player: nabu_media_player

#   use_wake_word: false
#   #vad_threshold: 3

#   noise_suppression_level: 0
#   auto_gain: 0 dbfs
#   volume_multiplier: 1

#   on_client_connected:
#     - lambda: id(init_in_progress) = false;
#     - if:
#         condition:
#           switch.is_on: sw_enable_mww
#         then:
#           - micro_wake_word.start:
#           - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
#         else:
#           - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};

#   on_client_disconnected:
#     - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
#     - voice_assistant.stop
#     - micro_wake_word.stop

#   on_end:
#       then:
#         - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
#         - script.execute: control_leds
#         - voice_assistant.stop
#         - wait_until:
#             not:
#               voice_assistant.is_running:
#         - if:
#             condition:
#               switch.is_on: sw_enable_mww
#             then:
#               - micro_wake_word.start:
#   on_error:
#       then:
#         - voice_assistant.stop
#         - wait_until:
#             not:
#               voice_assistant.is_running:
#         - if:
#             condition:
#               switch.is_on: sw_enable_mww
#             then:
#               - micro_wake_word.start:


voice_assistant:
  id: va
  microphone: mic0
  media_player: nabu_media_player
  # micro_wake_word: mww
  use_wake_word: false
  noise_suppression_level: 0
  auto_gain: 0 dbfs
  volume_multiplier: 1
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - micro_wake_word.start:
    - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
    - script.execute: control_leds
  on_client_disconnected:
    - voice_assistant.stop:
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: control_leds
  on_error:
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: control_leds
  # When the voice assistant starts: Play a wake up sound, duck audio.
  on_start:
    - nabu.set_ducking:
        decibel_reduction: 20   # Number of dB quieter; higher implies more quiet, 0 implies full volume
        duration: 0.0s          # The duration of the transition (default is 0)
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_waiting_for_command_phase_id};
    - script.execute: control_leds
  on_stt_vad_start:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_for_command_phase_id};
    - script.execute: control_leds
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: control_leds
  on_tts_start:
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: control_leds
    # Start a script that would potentially enable the stop word if the response is longer than a second
    - script.execute: activate_stop_word_if_tts_step_is_long
  # When the voice assistant ends ...
  on_end:
    - wait_until:
        not:
          voice_assistant.is_running:
    # Stop ducking audio.
    - nabu.set_ducking:
        decibel_reduction: 0   # 0 dB means no reduction
        duration: 1.0s
    # Stop the script that would potentially enable the stop word if the response is longer than a second
    - script.stop: activate_stop_word_if_tts_step_is_long
    # Disable the stop word (If the tiemr is not ringing)
    - if:
        condition:
          switch.is_off: timer_ringing
        then:
          # - lambda: id(stop).disable();
    # If the end happened because of an error, let the error phase on for a second
    - if:
        condition:
          lambda: return id(voice_assistant_phase) == ${voice_assist_error_phase_id};
        then:
          - delay: 1s
    # Reset the voice assistant phase id and reset the LED animations.
    - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
    - script.execute: control_leds
    - micro_wake_word.start:
  on_timer_finished:
    - switch.turn_on: timer_ringing
  on_timer_started:
    - script.execute: control_leds
  on_timer_cancelled:
    - script.execute: control_leds
  on_timer_updated:
    - script.execute: control_leds
  on_timer_tick:
    - script.execute: control_leds